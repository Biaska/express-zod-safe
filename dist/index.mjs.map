{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/// <reference types=\"./express.d.ts\" />\nimport type { NextFunction, Request, RequestHandler, Response } from \"express\";\nimport express from \"express\";\nimport { ZodError, type ZodRawShape, type ZodType, z } from \"zod\";\n\nconst types = [\"query\", \"params\", \"body\"] as const;\n\n/**\n * A ZodType type guard.\n * @param schema The Zod schema to check.\n * @returns Whether the provided schema is a ZodType.\n */\nfunction isZodType(schema: unknown): schema is ZodType {\n  return !!schema && typeof (schema as ZodType).safeParseAsync === \"function\";\n}\n\n// Override express@^5 request.query getter to provider setter\nconst descriptor = Object.getOwnPropertyDescriptor(express.request, \"query\");\nif (descriptor) {\n  Object.defineProperty(express.request, \"query\", {\n    get(this: Request) {\n      if (Object.hasOwn(this, \"_query\")) return this._query;\n      return descriptor?.get?.call(this);\n    },\n    set(this: Request, query: unknown) {\n      this._query = query;\n    },\n    configurable: true,\n    enumerable: true,\n  });\n}\n\n/**\n * Generates a middleware function for Express.js that validates request params, query, and body.\n * This function uses Zod schemas to perform validation against the provided schema definitions.\n *\n * @param schemas - An object containing Zod schemas for params, query, and body.\n * @returns An Express.js middleware function that validates the request based on the provided schemas.\n *          It attaches validated data to the request object and sends error details if validation fails.\n * @template TParams - Type definition for params schema.\n * @template TQuery - Type definition for query schema.\n * @template TBody - Type definition for body schema.\n * @example\n * // Example usage in an Express.js route\n * import express from 'express';\n * import validate from 'express-zod-safe';\n * import { z } from 'zod';\n *\n * const app = express();\n * app.use(express.json());\n *\n * // Define your Zod schemas\n * const params = {\n *   userId: z.string().uuid(),\n * };\n * const query = {\n *   age: z.coerce.number().optional(),\n * };\n * const body = {\n *   name: z.string(),\n *   email: z.string().email(),\n * };\n *\n * // Use the validate middleware in your route\n * app.post('/user/:userId', validate({ params, query, body }), (req, res) => {\n *   // Your route logic here\n *   res.send('User data is valid!');\n * });\n *\n * app.listen(3000, () => console.log('Server running on port 3000'));\n */\nexport default function validate<\n  TParams extends ValidationSchema,\n  TQuery extends ValidationSchema,\n  TBody extends ValidationSchema\n>(\n  schemas: CompleteValidationSchema<TParams, TQuery, TBody>\n): RequestHandler<\n  ZodOutput<TParams>,\n  any,\n  ZodOutput<TBody>,\n  ZodOutput<TQuery>\n> {\n  // Create validation objects for each type\n  const validation = {\n    params: isZodType(schemas.params)\n      ? schemas.params\n      : z.strictObject(schemas.params ?? {}),\n    query: isZodType(schemas.query)\n      ? schemas.query\n      : z.strictObject(schemas.query ?? {}),\n    body: isZodType(schemas.body)\n      ? schemas.body\n      : z.strictObject(schemas.body ?? {}),\n  };\n\n  return async (req, res, next): Promise<void> => {\n    const errors: ErrorListItem[] = [];\n    const issues = [];\n\n    // Validate all types (params, query, body)\n    for (const type of types) {\n      const parsed = await validation[type].safeParseAsync(req[type] ?? {});\n      if (parsed.success) req[type] = parsed.data as any;\n      else {\n        issues.push(...parsed.error.issues);\n      }\n    }\n\n    // Return all errors if there are any\n    if (issues.length > 0) {\n      throw new ZodError(issues);\n    }\n\n    return next();\n  };\n}\n\n/**\n * Describes the types of data that can be validated: 'query', 'params', or 'body'.\n */\ntype DataType = (typeof types)[number];\n\n/**\n * Defines the structure of an error item, containing the type of validation that failed (params, query, or body)\n * and the associated ZodError.\n */\nexport interface ErrorListItem {\n  type: DataType;\n  errors: ZodError;\n}\n\nexport type Unvalidated = unknown;\n\n/**\n * Represents a generic type for route validation, which can be applied to params, query, or body.\n * Each key-value pair represents a field and its corresponding Zod validation schema.\n */\nexport type ValidationSchema = ZodType | ZodRawShape;\n\n/**\n * Defines the structure for the schemas provided to the validate middleware.\n * Each property corresponds to a different part of the request (params, query, body)\n * and should be a record of Zod types for validation.\n *\n * @template TParams - Type definition for params schema.\n * @template TQuery - Type definition for query schema.\n * @template TBody - Type definition for body schema.\n */\nexport interface CompleteValidationSchema<\n  TParams extends ValidationSchema = ValidationSchema,\n  TQuery extends ValidationSchema = ValidationSchema,\n  TBody extends ValidationSchema = ValidationSchema\n> {\n  params?: TParams;\n  query?: TQuery;\n  body?: TBody;\n}\n\n/**\n * Represents the output type of a Zod validation schema.\n * This is used to infer the TypeScript type from a Zod schema,\n * providing typesafe access to the validated data.\n *\n * @template T - The validation type (params, query, or body).\n */\nexport type ZodOutput<T extends ValidationSchema | undefined> =\n  T extends ValidationSchema\n    ? z.output<T extends ZodRawShape ? z.ZodObject<T> : T>\n    : Unvalidated;\n\n/**\n * A utility type to ensure other middleware types don't conflict with the validate middleware.\n */\nexport type WeakRequestHandler = RequestHandler<\n  Unvalidated,\n  Unvalidated,\n  Unvalidated,\n  Unvalidated\n>;\n\n/**\n * A utility type to ensure the Request is typed correctly.\n * @template T - The validation schema to be applied to the request params, query and body.\n * @example\n * import { ValidatedRequest } from 'express-zod-safe';\n * import { z } from 'zod';\n *\n * const schema = {\n * \tquery: {\n * \t\tname: z.string().min(3).max(10),\n * \t\tage: z.coerce.number().min(18)\n * \t},\n * \tbody: {\n * \t\ttitle: z.string().max(4)\n * \t},\n * \tparams: {\n * \t\tid: z.coerce.number()\n * \t}\n * };\n *\n * const requestHandler = (req: ValidatedRequest<typeof schema>, res: Response) => {\n * \tconst { name, age } = req.query;\n * \tconst { id } = req.params;\n *  const { title } = req.body;\n *\n * \tres.send(`Hello ${title} ${name}! (Your age is ${age} and your ID is ${id})`);\n * };\n *\n * app.post('/handler/:id', validate(schema), requestHandler);\n */\nexport type ValidatedRequest<T extends CompleteValidationSchema> = Request<\n  ZodOutput<T[\"params\"]>,\n  any,\n  ZodOutput<T[\"body\"]>,\n  ZodOutput<T[\"query\"]>\n>;\n\n/**\n * A utility type to ensure the RequestHandler is typed correctly.\n * @template T - The validation schema to be applied to the request params, query and body.\n */\nexport type ValidatedRequestHandler<T extends CompleteValidationSchema> = (\n  req: ValidatedRequest<T>,\n  res: Response,\n  next: NextFunction\n) => void | Promise<void>;\n"],"mappings":";AAEA,OAAO,aAAa;AACpB,SAAS,UAA0C,SAAS;AAE5D,IAAM,QAAQ,CAAC,SAAS,UAAU,MAAM;AAOxC,SAAS,UAAU,QAAoC;AACrD,SAAO,CAAC,CAAC,UAAU,OAAQ,OAAmB,mBAAmB;AACnE;AAGA,IAAM,aAAa,OAAO,yBAAyB,QAAQ,SAAS,OAAO;AAC3E,IAAI,YAAY;AACd,SAAO,eAAe,QAAQ,SAAS,SAAS;AAAA,IAC9C,MAAmB;AACjB,UAAI,OAAO,OAAO,MAAM,QAAQ,EAAG,QAAO,KAAK;AAC/C,aAAO,YAAY,KAAK,KAAK,IAAI;AAAA,IACnC;AAAA,IACA,IAAmB,OAAgB;AACjC,WAAK,SAAS;AAAA,IAChB;AAAA,IACA,cAAc;AAAA,IACd,YAAY;AAAA,EACd,CAAC;AACH;AAyCe,SAAR,SAKL,SAMA;AAEA,QAAM,aAAa;AAAA,IACjB,QAAQ,UAAU,QAAQ,MAAM,IAC5B,QAAQ,SACR,EAAE,aAAa,QAAQ,UAAU,CAAC,CAAC;AAAA,IACvC,OAAO,UAAU,QAAQ,KAAK,IAC1B,QAAQ,QACR,EAAE,aAAa,QAAQ,SAAS,CAAC,CAAC;AAAA,IACtC,MAAM,UAAU,QAAQ,IAAI,IACxB,QAAQ,OACR,EAAE,aAAa,QAAQ,QAAQ,CAAC,CAAC;AAAA,EACvC;AAEA,SAAO,OAAO,KAAK,KAAK,SAAwB;AAC9C,UAAM,SAA0B,CAAC;AACjC,UAAM,SAAS,CAAC;AAGhB,eAAW,QAAQ,OAAO;AACxB,YAAM,SAAS,MAAM,WAAW,IAAI,EAAE,eAAe,IAAI,IAAI,KAAK,CAAC,CAAC;AACpE,UAAI,OAAO,QAAS,KAAI,IAAI,IAAI,OAAO;AAAA,WAClC;AACH,eAAO,KAAK,GAAG,OAAO,MAAM,MAAM;AAAA,MACpC;AAAA,IACF;AAGA,QAAI,OAAO,SAAS,GAAG;AACrB,YAAM,IAAI,SAAS,MAAM;AAAA,IAC3B;AAEA,WAAO,KAAK;AAAA,EACd;AACF;","names":[]}